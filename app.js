// ÁèæÂ†¥Áõ£Áù£Ê•≠ÂãôÁõ£Ë¶ñ„Ç∑„Çπ„ÉÜ„É† „É°„Ç§„É≥„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥
class SupervisorMonitoringApp {
    constructor() {
        this.currentTab = 'dashboard';
        this.currentFilters = {};
        this.currentSearch = '';
        this.init();
    }

    init() {
        this.setupEventListeners();
        this.populateFilters();
        this.updateDashboard();
        this.updateStatusBar();
        console.log('üèóÔ∏è ÁèæÂ†¥Áõ£Áù£Ê•≠ÂãôÁõ£Ë¶ñ„Ç∑„Çπ„ÉÜ„É† Ëµ∑ÂãïÂÆå‰∫Ü');
    }

    setupEventListeners() {
        // „Çø„ÉñÂàá„ÇäÊõø„Åà
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                this.switchTab(e.target.dataset.tab);
            });
        });

        // Ê§úÁ¥¢„Éª„Éï„Ç£„É´„Çø„Éº
        document.getElementById('project-search').addEventListener('input', 
            this.handleSearch.bind(this));
        
        document.getElementById('supervisor-filter').addEventListener('change', 
            this.handleFilterChange.bind(this));
        
        document.getElementById('category-filter').addEventListener('change', 
            this.handleFilterChange.bind(this));
        
        document.getElementById('status-filter').addEventListener('change', 
            this.handleFilterChange.bind(this));

        // ÁÖßÂêà„ÉÅ„Çß„ÉÉ„ÇØ
        document.getElementById('run-verification').addEventListener('click', 
            this.runVerification.bind(this));

        // Ë®≠ÂÆö„Çø„Éñ„ÅÆ„Ç§„Éô„É≥„Éà
        document.getElementById('import-data').addEventListener('click', 
            this.importData.bind(this));
        
        document.getElementById('export-report').addEventListener('click', 
            this.exportReport.bind(this));
            
        // Ë®≠ÂÆöÂÄ§„ÅÆÂ§âÊõ¥„Ç§„Éô„É≥„Éà
        document.getElementById('profit-threshold').addEventListener('change', 
            this.updateSettings.bind(this));
            
        document.getElementById('amount-threshold').addEventListener('change', 
            this.updateSettings.bind(this));
            
        document.getElementById('auto-verification').addEventListener('change', 
            this.updateSettings.bind(this));
            
        document.getElementById('email-alerts').addEventListener('change', 
            this.updateSettings.bind(this));

        // CSV„Éï„Ç°„Ç§„É´ÈÅ∏Êäû
        document.getElementById('csv-file').addEventListener('change', 
            this.handleFileSelect.bind(this));

        // „É¢„Éº„ÉÄ„É´
        document.querySelector('.close').addEventListener('click', 
            this.closeModal.bind(this));
        
        window.addEventListener('click', (e) => {
            if (e.target.classList.contains('modal')) {
                this.closeModal();
            }
        });
    }

    switchTab(tabName) {
        // „Çø„Éñ„Éú„Çø„É≥„ÅÆÁä∂ÊÖãÊõ¥Êñ∞
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');

        // „Çø„Éñ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅÆË°®Á§∫Âàá„ÇäÊõø„Åà
        document.querySelectorAll('.tab-content').forEach(content => {
            content.classList.remove('active');
        });
        document.getElementById(tabName).classList.add('active');

        this.currentTab = tabName;

        // „Çø„ÉñÂà•„ÅÆÂàùÊúüÂåñÂá¶ÁêÜ
        switch (tabName) {
            case 'dashboard':
                this.updateDashboard();
                break;
            case 'projects':
                this.renderProjectsTable();
                break;
            case 'verification':
                this.renderVerificationResults();
                break;
            case 'patterns':
                this.renderPatternAnalysis();
                break;
            case 'settings':
                this.loadSettings();
                break;
        }
    }

    populateFilters() {
        const supervisorSelect = document.getElementById('supervisor-filter');
        const supervisors = [...new Set(PROJECT_DATA.map(p => p.supervisor))].sort();
        
        supervisors.forEach(supervisor => {
            const option = document.createElement('option');
            option.value = supervisor;
            option.textContent = supervisor;
            supervisorSelect.appendChild(option);
        });
    }

    handleSearch(e) {
        this.currentSearch = e.target.value;
        if (this.currentTab === 'projects') {
            this.renderProjectsTable();
        }
    }

    handleFilterChange() {
        this.currentFilters = {
            supervisor: document.getElementById('supervisor-filter').value,
            workType: document.getElementById('category-filter').value,
            status: document.getElementById('status-filter').value
        };
        
        if (this.currentTab === 'projects') {
            this.renderProjectsTable();
        }
    }

    updateStatusBar() {
        const totalProjects = PROJECT_DATA.length;
        const alerts = generateAlerts();

        document.getElementById('total-projects').textContent = `Ê°à‰ª∂Êï∞: ${totalProjects}‰ª∂`;
        document.getElementById('alert-count').textContent = `Ë¶ÅÁ¢∫Ë™ç: ${alerts.length}‰ª∂`;
        document.getElementById('last-update').textContent = 
            `ÊúÄÁµÇÊõ¥Êñ∞: ${new Date().toLocaleString('ja-JP')}`;
    }

    updateDashboard() {
        this.renderMetrics();
        this.renderAlerts();
        this.renderSupervisorStats();
        this.renderProfitChart();
    }

    renderMetrics() {
        const activeProjects = PROJECT_DATA.filter(p => p.status === 'ÈÄ≤Ë°å‰∏≠').length;
        const pendingVerification = PROJECT_DATA.filter(p => p.status === 'ÁÖßÂêàÂæÖ„Å°').length;

        document.getElementById('active-projects').textContent = activeProjects;
        document.getElementById('pending-verification').textContent = pendingVerification;
    }

    renderAlerts() {
        const container = document.getElementById('alert-list');
        const alerts = generateAlerts();

        container.innerHTML = '';

        if (alerts.length === 0) {
            container.innerHTML = '<div class="text-muted text-center">„Ç¢„É©„Éº„Éà„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì</div>';
            return;
        }

        alerts.slice(0, 5).forEach(alert => {
            const alertElement = document.createElement('div');
            alertElement.className = `alert-item ${alert.type}`;
            alertElement.innerHTML = `
                <strong>${alert.supervisor}</strong><br>
                ${alert.message}
            `;
            container.appendChild(alertElement);
        });
    }

    renderSupervisorStats() {
        const container = document.getElementById('supervisor-stats');
        const stats = calculateSupervisorStats();

        container.innerHTML = '';

        stats.forEach(stat => {
            const statElement = document.createElement('div');
            statElement.className = 'supervisor-item';
            statElement.innerHTML = `
                <div class="supervisor-name">${stat.name}</div>
                <div class="supervisor-metrics">
                    <div class="supervisor-metric">
                        <span class="value">${stat.projectCount}</span>
                        <span class="label">Ê°à‰ª∂</span>
                    </div>
                    <div class="supervisor-metric">
                        <span class="value">${formatPercent(stat.avgProfitRate)}</span>
                        <span class="label">Âà©ÁõäÁéá</span>
                    </div>
                    <div class="supervisor-metric">
                        <span class="value">${formatCurrency(stat.totalContract)}</span>
                        <span class="label">Â£≤‰∏ä</span>
                    </div>
                </div>
            `;
            container.appendChild(statElement);
        });
    }

    renderProfitChart() {
        const canvas = document.getElementById('profit-chart');
        const ctx = canvas.getContext('2d');
        
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        const stats = calculateSupervisorStats();
        const maxProfit = Math.max(...stats.map(s => s.avgProfitRate));
        const barWidth = canvas.width / (stats.length + 1);
        
        stats.forEach((stat, index) => {
            const barHeight = (stat.avgProfitRate / maxProfit) * (canvas.height - 40);
            const x = (index + 1) * barWidth - barWidth/2;
            const y = canvas.height - barHeight - 20;
            
            ctx.fillStyle = '#3498db';
            ctx.fillRect(x - 20, y, 40, barHeight);
            
            ctx.fillStyle = '#333';
            ctx.font = '12px Arial';
            ctx.textAlign = 'center';
            ctx.fillText(stat.name, x, canvas.height - 5);
            ctx.fillText(`${formatPercent(stat.avgProfitRate)}`, x, y - 5);
        });
    }

    renderProjectsTable() {
        const tbody = document.getElementById('projects-tbody');
        const results = searchProjects(this.currentSearch, this.currentFilters);

        tbody.innerHTML = '';

        if (results.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="8" class="text-center text-muted">Ë©≤ÂΩì„Åô„ÇãÊ°à‰ª∂„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</td>
                </tr>
            `;
            return;
        }

        results.forEach(project => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${project.projectNo}</td>
                <td>${project.projectName}</td>
                <td>${project.supervisor}</td>
                <td>${project.workType}</td>
                <td class="text-right">${formatCurrency(project.contractAmount)}</td>
                <td class="text-right ${project.profitRate < 15 ? 'text-danger' : project.profitRate > 30 ? 'text-success' : ''}">${formatPercent(project.profitRate)}</td>
                <td><span class="status-badge ${getStatusBadgeClass(project.status)}">${project.status}</span></td>
                <td>
                    <button class="btn-primary btn-small" onclick="app.showProjectDetail('${project.projectNo}')">Ë©≥Á¥∞</button>
                </td>
            `;
            tbody.appendChild(row);
        });
    }

    showProjectDetail(projectNo) {
        const project = PROJECT_DATA.find(p => p.projectNo === projectNo);
        const estimate = ESTIMATE_DATA.find(e => e.projectNo === projectNo);
        const orders = ORDER_DATA.filter(o => o.projectNo === projectNo);

        const modal = document.getElementById('detail-modal');
        const modalBody = document.getElementById('modal-body');

        modalBody.innerHTML = `
            <h2>Ê°à‰ª∂Ë©≥Á¥∞: ${project.projectName}</h2>
            
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px;">
                <div>
                    <h3>Âü∫Êú¨ÊÉÖÂ†±</h3>
                    <table style="width: 100%; border-collapse: collapse;">
                        <tr><td><strong>Áâ©‰ª∂No:</strong></td><td>${project.projectNo}</td></tr>
                        <tr><td><strong>È°ßÂÆ¢:</strong></td><td>${project.customer}</td></tr>
                        <tr><td><strong>ÊãÖÂΩìËÄÖ:</strong></td><td>${project.supervisor}</td></tr>
                        <tr><td><strong>Â∑•‰∫ãÂå∫ÂàÜ:</strong></td><td>${project.workType}</td></tr>
                        <tr><td><strong>„Çπ„ÉÜ„Éº„Çø„Çπ:</strong></td><td><span class="status-badge ${getStatusBadgeClass(project.status)}">${project.status}</span></td></tr>
                    </table>
                </div>
                
                <div>
                    <h3>ÈáëÈ°çÊÉÖÂ†±</h3>
                    <table style="width: 100%; border-collapse: collapse;">
                        <tr><td><strong>Â•ëÁ¥ÑÈ°ç:</strong></td><td class="text-right">${formatCurrency(project.contractAmount)}</td></tr>
                        <tr><td><strong>Âéü‰æ°:</strong></td><td class="text-right">${formatCurrency(project.costAmount)}</td></tr>
                        <tr><td><strong>Âà©Áõä:</strong></td><td class="text-right">${formatCurrency(project.profitAmount)}</td></tr>
                        <tr><td><strong>Âà©ÁõäÁéá:</strong></td><td class="text-right ${project.profitRate < 15 ? 'text-danger' : project.profitRate > 30 ? 'text-success' : ''}">${formatPercent(project.profitRate)}</td></tr>
                    </table>
                </div>
            </div>

            ${estimate ? `
                <div style="margin-bottom: 20px;">
                    <h3>Ë¶ãÁ©ç„ÇÇ„ÇäÂÜÖÂÆπÔºà${estimate.supervisor}Áõ£Áù£Ôºâ</h3>
                    <table style="width: 100%; border-collapse: collapse; border: 1px solid #ddd;">
                        <thead style="background: #f8f9fa;">
                            <tr>
                                <th style="border: 1px solid #ddd; padding: 8px;">„Ç´„ÉÜ„Ç¥„É™</th>
                                <th style="border: 1px solid #ddd; padding: 8px;">ÂÜÖÂÆπ</th>
                                <th style="border: 1px solid #ddd; padding: 8px;">ÈáëÈ°ç</th>
                                <th style="border: 1px solid #ddd; padding: 8px;">ÂÇôËÄÉ</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${estimate.items.map(item => `
                                <tr>
                                    <td style="border: 1px solid #ddd; padding: 8px;">${item.category}</td>
                                    <td style="border: 1px solid #ddd; padding: 8px;">${item.description}</td>
                                    <td style="border: 1px solid #ddd; padding: 8px; text-align: right;">${formatCurrency(item.amount)}</td>
                                    <td style="border: 1px solid #ddd; padding: 8px;">${item.note}</td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                </div>
            ` : ''}

            ${orders.length > 0 ? `
                <div>
                    <h3>Áô∫Ê≥®ÊÉÖÂ†±</h3>
                    ${orders.map(order => `
                        <div style="margin-bottom: 15px; border: 1px solid #ddd; padding: 10px; border-radius: 5px;">
                            <h4>${order.supplier} (${order.orderDate})</h4>
                            <table style="width: 100%; border-collapse: collapse;">
                                <thead style="background: #f8f9fa;">
                                    <tr>
                                        <th style="border: 1px solid #ddd; padding: 5px;">ÂìÅÁï™</th>
                                        <th style="border: 1px solid #ddd; padding: 5px;">ÂïÜÂìÅÂêç</th>
                                        <th style="border: 1px solid #ddd; padding: 5px;">Êï∞Èáè</th>
                                        <th style="border: 1px solid #ddd; padding: 5px;">Âçò‰æ°</th>
                                        <th style="border: 1px solid #ddd; padding: 5px;">ÈáëÈ°ç</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${order.items.map(item => `
                                        <tr>
                                            <td style="border: 1px solid #ddd; padding: 5px;">${item.itemCode}</td>
                                            <td style="border: 1px solid #ddd; padding: 5px;">${item.itemName}</td>
                                            <td style="border: 1px solid #ddd; padding: 5px; text-align: center;">${item.quantity}</td>
                                            <td style="border: 1px solid #ddd; padding: 5px; text-align: right;">${formatCurrency(item.unitPrice)}</td>
                                            <td style="border: 1px solid #ddd; padding: 5px; text-align: right;">${formatCurrency(item.amount)}</td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        </div>
                    `).join('')}
                </div>
            ` : ''}
        `;

        modal.classList.remove('hidden');
    }

    closeModal() {
        document.getElementById('detail-modal').classList.add('hidden');
    }

    runVerification() {
        this.showLoading();
        
        setTimeout(() => {
            this.renderVerificationResults();
            this.hideLoading();
            
            // ÂÆüË£Ö‰æã„ÇíË°®Á§∫
            alert(`ÁÖßÂêà„ÉÅ„Çß„ÉÉ„ÇØÂÆå‰∫ÜÔºÅ

‚úÖ ÁÖßÂêàOK: 2‰ª∂
‚ö†Ô∏è Ë¶ÅÁ¢∫Ë™ç: 1‰ª∂  
‚ùå „Ç®„É©„Éº: 2‰ª∂

Ë©≥Á¥∞„ÅØÁîªÈù¢„Åß„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑ„ÄÇ
ÂÆüÈÅãÁî®„Åß„ÅØ„ÄÅ„Ç¢„ÇØ„Çª„ÇπDB„Å®‰ªïÂÖ•„ÇåÂÖà„Éá„Éº„Çø„ÇíËá™ÂãïÁÖßÂêà„Åó„Åæ„Åô„ÄÇ`);
        }, 1500);
    }

    renderVerificationResults() {
        const okContainer = document.getElementById('verification-ok');
        const warningContainer = document.getElementById('verification-warning');
        const errorContainer = document.getElementById('verification-error');

        okContainer.innerHTML = `
            <div class="verification-item ok">
                <strong>37.04.004 - Êú¨ÂéöÊú®„Çπ„Ç´„Ç§„Éè„Ç§„ÉÑ233</strong><br>
                Ë¶ãÁ©ç„ÇÇ„Çä„Å®Áô∫Ê≥®„ÅåÊ≠£Â∏∏„Å´‰∏ÄËá¥„Åó„Å¶„ÅÑ„Åæ„Åô
            </div>
            <div class="verification-item ok">
                <strong>37.04.211 - „Ç´„Éº„Çµ„É¥„Ç£„Ç¢ËàπÂ†Ä</strong><br>
                ÈáëÈ°ç„ÉªÊï∞Èáè„Å´ÂïèÈ°å„ÅÇ„Çä„Åæ„Åõ„Çì
            </div>
        `;

        warningContainer.innerHTML = `
            <div class="verification-item warning">
                <strong>37.04.002 - Â∫ú‰∏≠‰ΩèÂêâÁî∫‰ΩèÂÆÖ</strong><br>
                Ë¶ãÁ©ç„ÇÇ„Çä„Äå„Ç≠„ÉÉ„ÉÅ„É≥Êé®Ëñ¶„Äç¬•800,000 vs Áô∫Ê≥®ÂêàË®à¬•693,000<br>
                <small>‚Üí Â∑•‰∫ãË≤ª„ÅåÂà•ÈÄîË®à‰∏ä„Åï„Çå„Å¶„ÅÑ„ÇãÂèØËÉΩÊÄß</small>
            </div>
        `;

        errorContainer.innerHTML = `
            <div class="verification-item error">
                <strong>37.04.008 - ÂõΩÁ´ãÂ∏ÇÊ≥â3‰∏ÅÁõÆ</strong><br>
                Ë¶ãÁ©ç„ÇÇ„Çä„ÄåUB-1616„Äç„Å´ÂØæÂøú„Åô„ÇãÁô∫Ê≥®„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì<br>
                <small>‚Üí Áô∫Ê≥®Êºè„Çå„ÅÆÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô</small>
            </div>
            <div class="verification-item error">
                <strong>37.04.470 - TY„Éì„É´</strong><br>
                Áô∫Ê≥®ÈáëÈ°ç„ÅåË¶ãÁ©ç„ÇÇ„Çä„Çí20%Ë∂ÖÈÅé„Åó„Å¶„ÅÑ„Åæ„Åô<br>
                <small>‚Üí Âéü‰æ°ÁÆ°ÁêÜ„ÅÆÁ¢∫Ë™ç„ÅåÂøÖË¶Å</small>
            </div>
        `;
    }

    renderPatternAnalysis() {
        this.renderSupervisorPatterns();
        this.renderNamingPatterns();
        this.renderCostPatterns();
        this.renderImprovementSuggestions();
    }

    renderSupervisorPatterns() {
        const container = document.getElementById('supervisor-patterns');
        container.innerHTML = '';

        Object.entries(SUPERVISOR_PATTERNS).forEach(([name, pattern]) => {
            const patternElement = document.createElement('div');
            patternElement.className = 'pattern-item';
            patternElement.innerHTML = `
                <div class="pattern-label">${name} (${pattern.totalProjects}‰ª∂)</div>
                <div class="pattern-value">
                    Âπ≥ÂùáÂà©ÁõäÁéá: ${formatPercent(pattern.avgProfitRate)}<br>
                    „Çà„Åè‰Ωø„ÅÜ‰ªïÂÖ•„ÇåÂÖà: ${pattern.preferredSuppliers.join(', ')}<br>
                    ${pattern.characteristics.join('„ÄÅ')}
                </div>
            `;
            container.appendChild(patternElement);
        });
    }

    renderNamingPatterns() {
        const container = document.getElementById('naming-patterns');
        container.innerHTML = '';

        Object.entries(SUPERVISOR_PATTERNS).forEach(([name, pattern]) => {
            pattern.namingPatterns.forEach(naming => {
                const patternElement = document.createElement('div');
                patternElement.className = 'pattern-item';
                patternElement.innerHTML = `
                    <div class="pattern-label">"${naming.pattern}" (${name})</div>
                    <div class="pattern-value">${naming.meaning}</div>
                `;
                container.appendChild(patternElement);
            });
        });
    }

    renderCostPatterns() {
        const container = document.getElementById('cost-patterns');
        const stats = calculateSupervisorStats();

        container.innerHTML = '';

        stats.forEach(stat => {
            const patternElement = document.createElement('div');
            patternElement.className = 'pattern-item';
            patternElement.innerHTML = `
                <div class="pattern-label">${stat.name}</div>
                <div class="pattern-value">
                    Âπ≥ÂùáÊ°à‰ª∂Ë¶èÊ®°: ${formatCurrency(stat.totalContract / stat.projectCount)}<br>
                    Âà©ÁõäÁéá: ${formatPercent(stat.avgProfitRate)}
                </div>
            `;
            container.appendChild(patternElement);
        });
    }

    renderImprovementSuggestions() {
        const container = document.getElementById('improvement-suggestions');
        
        container.innerHTML = `
            <div class="pattern-item">
                <div class="pattern-label">Ë¶ãÁ©ç„ÇÇ„ÇäË°®Ë®ò„ÅÆÊ®ôÊ∫ñÂåñ</div>
                <div class="pattern-value">
                    ÁèæÂ†¥Áõ£Áù£Âà•„ÅÆÁã¨Ëá™Ë°®Ë®ò„ÇíÁµ±‰∏Ä„Åô„Çã„Åì„Å®„ÅßÁÖßÂêàÂäπÁéá„ÅåÂêë‰∏ä„Åó„Åæ„Åô
                </div>
            </div>
            <div class="pattern-item">
                <div class="pattern-label">‰ΩéÂà©ÁõäÁéáÊ°à‰ª∂„ÅÆÊîπÂñÑ</div>
                <div class="pattern-value">
                    Áî∞ÂéüÁõ£Áù£„ÅÆÊ°à‰ª∂„ÅßÂà©ÁõäÁéá17.5%„Å®‰Ωé„ÇÅ„ÄÇÂéü‰æ°ÁÆ°ÁêÜ„ÅÆË¶ãÁõ¥„Åó„ÇíÊé®Â•®
                </div>
            </div>
            <div class="pattern-item">
                <div class="pattern-label">‰ªïÂÖ•„ÇåÂÖà„ÅÆÈõÜÁ¥Ñ</div>
                <div class="pattern-value">
                    LIXIL„ÉªTOTO„ÅÆ‰ΩøÁî®Áéá„ÅåÈ´ò„ÅÑ„ÄÇ„Éú„É™„É•„Éº„É†Ââ≤Âºï‰∫§Ê∏â„ÅÆ‰ΩôÂú∞„ÅÇ„Çä
                </div>
            </div>
        `;
    }

    // Ë®≠ÂÆöÈñ¢ÈÄ£„ÅÆÊ©üËÉΩ
    loadSettings() {
        // „É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Åã„ÇâË®≠ÂÆö„ÇíË™≠„ÅøËæº„Åø
        const savedSettings = localStorage.getItem('supervisorMonitorSettings');
        if (savedSettings) {
            const settings = JSON.parse(savedSettings);
            document.getElementById('profit-threshold').value = settings.profitThreshold || 15;
            document.getElementById('amount-threshold').value = settings.amountThreshold || 10;
            document.getElementById('auto-verification').checked = settings.autoVerification || false;
            document.getElementById('email-alerts').checked = settings.emailAlerts || false;
        }
    }

    updateSettings() {
        // Ë®≠ÂÆöÂÄ§„Çí‰øùÂ≠ò
        const settings = {
            profitThreshold: document.getElementById('profit-threshold').value,
            amountThreshold: document.getElementById('amount-threshold').value,
            autoVerification: document.getElementById('auto-verification').checked,
            emailAlerts: document.getElementById('email-alerts').checked
        };
        
        localStorage.setItem('supervisorMonitorSettings', JSON.stringify(settings));
        
        // „Ç¢„É©„Éº„ÉàË®≠ÂÆö„ÇíÊõ¥Êñ∞
        ALERT_SETTINGS.profitRateThreshold = parseInt(settings.profitThreshold);
        ALERT_SETTINGS.amountThreshold = parseInt(settings.amountThreshold);
        
        // ÁîªÈù¢„ÇíÊõ¥Êñ∞
        this.updateDashboard();
        
        console.log('Ë®≠ÂÆö„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü:', settings);
    }

    importData() {
        document.getElementById('csv-file').click();
    }

    handleFileSelect(e) {
        const file = e.target.files[0];
        if (!file) return;
        
        if (file.type === 'text/csv' || file.name.endsWith('.csv')) {
            this.processCSVFile(file);
        } else {
            alert('CSV„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
        }
    }

    processCSVFile(file) {
        const reader = new FileReader();
        
        reader.onload = (e) => {
            const csvData = e.target.result;
            console.log('CSV„Éá„Éº„ÇøË™≠„ÅøËæº„ÅøÊàêÂäü:', file.name);
            
            try {
                // CSV„Éë„Éº„Çµ„Éº„Çí‰ΩøÁî®„Åó„Å¶„Éá„Éº„Çø„ÇíËß£Êûê
                const parser = new CSVParser();
                const parsedData = parser.parseCSV(csvData);
                const projectData = parser.convertToProjectData(parsedData);
                
                // „Éá„Éº„ÇøÁµ±Ë®à„ÇíË®àÁÆó
                const totalProjects = projectData.length;
                const totalAmount = projectData.reduce((sum, p) => sum + p.contractAmount, 0);
                const avgProfitRate = projectData.reduce((sum, p) => sum + p.profitRate, 0) / totalProjects;
                
                // Á¢∫Ë™ç„ÉÄ„Ç§„Ç¢„É≠„Ç∞
                const confirmMessage = `
„Éï„Ç°„Ç§„É´„Äå${file.name}„Äç„ÇíË™≠„ÅøËæº„Åø„Åæ„Åó„ÅüÔºÅ

„ÄêË™≠„ÅøËæº„ÅøÁµêÊûú„Äë
‚úÖ Ê°à‰ª∂Êï∞: ${totalProjects}‰ª∂
‚úÖ ÂêàË®àÂ•ëÁ¥ÑÈ°ç: ${formatCurrency(totalAmount)}
‚úÖ Âπ≥ÂùáÂà©ÁõäÁéá: ${formatPercent(avgProfitRate)}

„Äê„Éá„Éº„Çø‰æã„Äë
${projectData.slice(0, 3).map(p => `„Éª${p.projectNo} ${p.projectName} (${p.supervisor})`).join('\n')}

„Åì„ÅÆ„Éá„Éº„Çø„Çí„Ç∑„Çπ„ÉÜ„É†„Å´ÂèçÊò†„Åó„Åæ„Åô„ÅãÔºü`;
                
                if (confirm(confirmMessage)) {
                    // Êó¢Â≠ò„Éá„Éº„Çø„Å´ËøΩÂä†ÔºàÂÆüÈöõ„ÅÆÈÅãÁî®„Åß„ÅØÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ„ÅåÂøÖË¶ÅÔºâ
                    PROJECT_DATA.push(...projectData);
                    
                    // Ë¶ãÁ©ç„ÇÇ„Çä„Éá„Éº„Çø„ÇÇÁîüÊàêÔºà‰ªÆÂÆüË£ÖÔºâ
                    const estimateData = parser.extractEstimateData(parsedData);
                    ESTIMATE_DATA.push(...estimateData);
                    
                    // ÁîªÈù¢„ÇíÊõ¥Êñ∞
                    this.updateStatusBar();
                    this.populateFilters(); // „Éï„Ç£„É´„Çø„Éº„ÇíÂÜçÊßãÁØâ
                    
                    if (this.currentTab === 'dashboard') {
                        this.updateDashboard();
                    } else if (this.currentTab === 'projects') {
                        this.renderProjectsTable();
                    }
                    
                    alert(`‚úÖ „Éá„Éº„Çø„ÅÆÂèñ„ÇäËæº„Åø„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ

ËøΩÂä†„Åï„Çå„ÅüÊ°à‰ª∂: ${totalProjects}‰ª∂
ÁèæÂú®„ÅÆÁ∑èÊ°à‰ª∂Êï∞: ${PROJECT_DATA.length}‰ª∂

„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„Åæ„Åü„ÅØÊ°à‰ª∂‰∏ÄË¶ß„Åß„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑ„ÄÇ`);
                }
                
            } catch (error) {
                console.error('CSV„Éë„Éº„Çπ„Ç®„É©„Éº:', error);
                alert(`„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ

„Ç®„É©„Éº: ${error.message}

CSV„Éï„Ç°„Ç§„É´„ÅÆÂΩ¢Âºè„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
„Éª„Çø„ÉñÂå∫Âàá„Çä„Åß„ÅÇ„Çã„Åì„Å®
„Éª„Éò„ÉÉ„ÉÄ„ÉºË°å„ÅåÊ≠£„Åó„ÅÑ„Åì„Å®
„ÉªÊñáÂ≠ó„Ç≥„Éº„Éâ„ÅåShift-JIS„Åß„ÅÇ„Çã„Åì„Å®`);
            }
        };
        
        reader.onerror = () => {
            alert('„Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
        };
        
        reader.readAsText(file, 'Shift_JIS'); // Êó•Êú¨Ë™û„Ç®„É≥„Ç≥„Éº„Éá„Ç£„É≥„Ç∞ÂØæÂøú
    }

    exportReport() {
        const stats = calculateSupervisorStats();
        const alerts = generateAlerts();
        
        const reportData = {
            generatedAt: new Date().toISOString(),
            totalProjects: PROJECT_DATA.length,
            supervisorStats: stats,
            alerts: alerts,
            averageProfitRate: stats.reduce((sum, s) => sum + s.avgProfitRate, 0) / stats.length
        };

        // JSONÂΩ¢Âºè„Åß„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
        const blob = new Blob([JSON.stringify(reportData, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `Áõ£Áù£Ê•≠Âãô„É¨„Éù„Éº„Éà_${new Date().toISOString().split('T')[0]}.json`;
        a.click();
        
        // ÂÆüË£Ö‰∫àÂÆö„ÅÆExcelÂá∫Âäõ„Å´„Å§„ÅÑ„Å¶Ë™¨Êòé
        alert(`„É¨„Éù„Éº„Éà„ÇíÂá∫Âäõ„Åó„Åæ„Åó„ÅüÔºÅ

„ÄêÁèæÂú®„ÄëJSON„Éï„Ç°„Ç§„É´„ÅßÂá∫Âäõ
„ÄêÂÆüË£Ö‰∫àÂÆö„Äë
- ExcelÂΩ¢Âºè„Åß„ÅÆÂá∫Âäõ
- „Ç∞„É©„Éï„Éª„ÉÅ„É£„Éº„Éà‰ªò„Åç
- ÊúàÊ¨°ÊØîËºÉ„É¨„Éù„Éº„Éà
- „É°„Éº„É´Ëá™ÂãïÈÄÅ‰ø°Ê©üËÉΩ

ÂÆüÈÅãÁî®ÊôÇ„ÅØÂæ°Á§æ„ÅÆÂ†±ÂëäÊõ∏„Éï„Ç©„Éº„Éû„ÉÉ„Éà„Å´
Âêà„Çè„Åõ„Å¶„Ç´„Çπ„Çø„Éû„Ç§„Ç∫„Åó„Åæ„Åô„ÄÇ`);
    }

    showLoading() {
        document.getElementById('loading').classList.remove('hidden');
    }

    hideLoading() {
        document.getElementById('loading').classList.add('hidden');
    }
}

// „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥ÂàùÊúüÂåñ
let app;

document.addEventListener('DOMContentLoaded', () => {
    app = new SupervisorMonitoringApp();
    
    console.log('üìä „Ç∑„Çπ„ÉÜ„É†Ê©üËÉΩ:');
    console.log('  ‚úÖ Ê°à‰ª∂ÁÆ°ÁêÜ„ÉªÊ§úÁ¥¢');
    console.log('  ‚úÖ ÊãÖÂΩìËÄÖÂà•ÂàÜÊûê');
    console.log('  ‚úÖ Âà©ÁõäÁéáÁõ£Ë¶ñ');
    console.log('  ‚úÖ „Ç¢„É©„Éº„ÉàÊ©üËÉΩ');
    console.log('  ‚úÖ Ë¶ãÁ©ç„ÇÇ„Çä vs Áô∫Ê≥®ÁÖßÂêà');
    console.log('  ‚úÖ „Éë„Çø„Éº„É≥ÂàÜÊûê');
    console.log('  ‚úÖ ÊîπÂñÑÊèêÊ°à');
}); 